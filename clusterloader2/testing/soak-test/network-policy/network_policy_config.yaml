{{$NUMBER_OF_SERVERS_PER_Group := DefaultParam .CL2_NUMBER_OF_SERVERS_PER_GROUP 2}}
{{$NUMBER_OF_CLIENTS_PER_Group := DefaultParam .CL2_NUMBER_OF_CLIENTS_PER_GROUP 1}}
{{$NUMBER_OF_GROUPS := DefaultParam .CL2_NUMBER_OF_GROUPS 2}}
{{$TARGET_PORT := DefaultParam .CL2_TARGET_PORT 8888}}
{{$TARGET_PORT2 := DefaultParam .CL2_TARGET_PORT2 9090}}
{{$WORKERS_PER_CLIENT := DefaultParam .CL2_WORKERS_PER_CLIENT 5}}
{{$DURATION := DefaultParam .CL2_DURATION 600}}
{{$repeats := DefaultParam .CL2_REPEATS 1}}
{{$Network_Policy_Type := DefaultParam .CL2_NETWORK_POLICY_TYPE "none"}}
{{$NET_POLICY_L7_ENABLED := DefaultParam .CL2_NET_POLICY_L7_ENABLED false}}
{{$L3_L4_PORT := DefaultParam .CL2_L3_L4_PORT false}}
{{$RESTART_DELETION_ENABLED := DefaultParam .CL2_RESTART_DELETION_ENABLED false}}
{{$CLIENT_POD_MONITOR := DefaultParam .CL2_CLIENT_POD_MONITOR false}}
{{$SOAK_TEST := DefaultParam .CL2_SOAK_TEST false}}
namespace:
  number: {{$NUMBER_OF_GROUPS}}
  prefix: slo
  deleteStaleNamespaces: true
  deleteAutomanagedNamespaces: true
  enableExistingNamespaces: false
steps:
# create gather 
# 1. start cilium agent metrics & client metrics
# 2. start cilium envoy metrics
# 3. start resource usage metrics (cpu, memory usage of Envoy) 
# 4. start connectivity soak performance measurement (setup and run)
# 5. gather connectivity soak performance measurement (wait and gather results)
# 6. gather resource usage metrics
# 7. gather cilium envoy metrics
# 8. gather cilium agent metrics & client metrics
# 1. start cilium agent metrics
- name: APIServer Metrics
  measurements:
  - Identifier: ApiserverAvgCPUUsage
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: Apiserver Average CPU Usage
      metricVersion: v1
      unit: cpu
      enableViolations: true
      queries:
      - name: Perc99
        query: quantile(0.99, avg_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
      - name: Perc90
        query: quantile(0.90, avg_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
      - name: Perc50
        query: quantile(0.50, avg_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
  - Identifier: ApiserverMaxCPUUsage
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: Apiserver Max CPU Usage
      metricVersion: v1
      unit: cpu
      enableViolations: true
      queries:
      - name: Perc99
        query: quantile(0.99, max_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
      - name: Perc90
        query: quantile(0.90, max_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
      - name: Perc50
        query: quantile(0.50, max_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
  - Identifier: ApiserverAvgMemUsage
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: Apiserver Avg Memory Usage
      metricVersion: v1
      unit: MB
      enableViolations: true
      queries:
      - name: Perc99
        query: quantile(0.99, avg_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
      - name: Perc90
        query: quantile(0.90, avg_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
      - name: Perc50
        query: quantile(0.5, avg_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
  - Identifier: ApiserverMaxMemUsage
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: Apiserver Max Memory Usage
      metricVersion: v1
      unit: MB
      enableViolations: true
      queries:
      - name: Perc99
        query: quantile(0.99, max_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
      - name: Perc90
        query: quantile(0.90, max_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
      - name: Perc50
        query: quantile(0.5, max_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
- name: Cilium Agent Metrics
  measurements:
  - Identifier: CiliumAgentAverageCPUUsage
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: cilium_average_cpu_usage
      metricVersion: v1
      unit: cpu
      queries:
      - name: Perc99
        query: quantile(0.99, avg_over_time(rate(cilium_process_cpu_seconds_total[1m])[%v:]))
      - name: Perc90
        query: quantile(0.90, avg_over_time(rate(cilium_process_cpu_seconds_total[1m])[%v:]))
      - name: Perc50
        query: quantile(0.50, avg_over_time(rate(cilium_process_cpu_seconds_total[1m])[%v:]))
  - Identifier: CiliumAgentAvgMemUsage
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: cilium_avg_memory_usage
      metricVersion: v1
      unit: MB
      queries:
      - name: Perc99
        query: quantile(0.99, avg_over_time(cilium_process_resident_memory_bytes[%v:]) / 1024 / 1024)
      - name: Perc90
        query: quantile(0.90, avg_over_time(cilium_process_resident_memory_bytes[%v:]) / 1024 / 1024)
      - name: Perc50
        query: quantile(0.5, avg_over_time(cilium_process_resident_memory_bytes[%v:]) / 1024 / 1024)
  - Identifier: HttpRequestsTotal
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: Total number of HTTP Requests Total
      metricVersion: v1
      unit: count
      dimensions:
      - port
      enableViolations: true
      queries:
      - name: total number of http requests total over time
        query: sum(sum_over_time(http_requests_total[%v:])) by (port)
  - Identifier: TotalHttpRequestsFail
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: Total number of HTTP Requests Fail
      metricVersion: v1
      unit: count
      dimensions:
      - port
      enableViolations: true
      queries:
      - name: total number of http requests fail over time
        query: sum(sum_over_time(http_requests_fail[%v:])) by (port)
  - Identifier: TotalHttpRequestsSuccess
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: Total number of HTTP Requests Success
      metricVersion: v1
      unit: count
      dimensions:
      - port
      enableViolations: true
      queries:
      - name: total number of http requests success over time
        query: sum(sum_over_time(http_requests_success[%v:])) by (port)
  - Identifier: CiliumAgentMaxCPUUsage
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: cilium_max_cpu_usage
      metricVersion: v1
      unit: cpu
      enableViolations: true
      queries:
      - name: Perc99
        query: quantile(0.99, max_over_time(rate(cilium_process_cpu_seconds_total[1m])[%v:]))
      - name: Perc90
        query: quantile(0.90, max_over_time(rate(cilium_process_cpu_seconds_total[1m])[%v:]))
      - name: Perc50
        query: quantile(0.50, max_over_time(rate(cilium_process_cpu_seconds_total[1m])[%v:]))      
  - Identifier: CiliumAgentMaxMemUsage
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: cilium_max_memory_usage
      metricVersion: v1
      unit: MB
      enableViolations: true
      queries:
      - name: Perc99
        query: quantile(0.99, max_over_time(cilium_process_resident_memory_bytes[%v:]) / 1024 / 1024)
      - name: Perc90
        query: quantile(0.90, max_over_time(cilium_process_resident_memory_bytes[%v:]) / 1024 / 1024)
      - name: Perc50
        query: quantile(0.5, max_over_time(cilium_process_resident_memory_bytes[%v:]) / 1024 / 1024)
  - Identifier: CiliumAgentL7Policy
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: cilium_l7_policy 
      metricVersion: v1
      unit: count
      queries:
      - name: cilium_l7_received
        query: sum(increase(cilium_policy_l7_total{proxy_type="envoy", rule="received"}[%v:]))
      - name: cilium_l7_forwarded
        query: sum(increase(cilium_policy_l7_total{proxy_type="envoy", rule="forwarded"}[%v:]))
      - name: cilium_l7_failed
        query: sum(increase(cilium_policy_l7_total{proxy_type="envoy", rule!~"received|forwarded"}[%v:]))  
# 2. start cilium envoy metrics
- name: Starting cilium envoy metrics for http load test
  measurements:
  - Identifier: HTTPPerfCiliumEnvoyMetrics
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: "cilium_envoy_http_metrics"
      metricVersion: v1
      unit: s
      queries:
        - name: envoy_http_requests_total
          query: sum(increase(envoy_http_rq_total{envoy_http_conn_manager_prefix="proxy"}[%v:]))
        - name: envoy_http_requests_rate
          query: avg(rate(envoy_http_rq_total{envoy_http_conn_manager_prefix="proxy"}[%v:]) unless rate(envoy_http_rq_total{envoy_http_conn_manager_prefix="proxy"}[%v:]) == 0)
        - name: envoy_downstream_connections_total
          query: sum(increase(envoy_listener_downstream_cx_total{envoy_listener_address!~"^(0\\.0\\.0\\.0_9964|127\\.0\\.0\\.1_9878)$"}[%v:]))
        - name: envoy_downstream_connections_rate
          query: avg(rate(envoy_listener_downstream_cx_total{envoy_listener_address!~"^(0\\.0\\.0\\.0_9964|127\\.0\\.0\\.1_9878)$"}[%v:]) unless rate(envoy_listener_downstream_cx_total{envoy_listener_address!~"^(0\\.0\\.0\\.0_9964|127\\.0\\.0\\.1_9878)$"}[%v:]) == 0)
        - name: envoy_upstream_connections_total
          query: sum(increase(envoy_cluster_upstream_cx_total{envoy_cluster_name="egress-cluster"}[%v:]))
        - name: envoy_upstream_connections_rate
          query: avg(rate(envoy_cluster_upstream_cx_total{envoy_cluster_name="egress-cluster"}[%v:]) unless rate(envoy_cluster_upstream_cx_total{envoy_cluster_name="egress-cluster"}[%v:]) == 0)
        - name: envoy_memory_allocated_max
          query: max(max_over_time(envoy_server_memory_allocated[%v:])) / 1024 / 1024
        - name: envoy_memory_heap_size_max
          query: max(max_over_time(envoy_server_memory_heap_size[%v:])) / 1024 / 1024
# 4. start connectivity soak performance measurement (setup and run)
{{range $i := Loop $repeats}}
- name: Connectivity Soak Test - Start
  measurements:
  - Identifier: ConnectivitySoakMeasurement
    Method: ConnectivitySoakMeasurement
    Params:
      action: start
      targetLabelKey: app
      targetLabelValue: target
      clientLabelKey: app
      clientLabelValue: client
      targetReplicasPerNs: {{$NUMBER_OF_SERVERS_PER_Group}}
      clientReplicasPerDep: {{$NUMBER_OF_CLIENTS_PER_Group}}
      targetPort: {{$TARGET_PORT}}
      targetPort2: {{$TARGET_PORT2}}
      l7Enabled: {{$NET_POLICY_L7_ENABLED}}
      l3l4port: {{$L3_L4_PORT}}
      enableNetworkPolicy: true
      resourceGatheringEnabled: false
      targetPath: /
      testDuration: "{{$DURATION}}"
      workerPerClient: {{$WORKERS_PER_CLIENT}}
      npType: {{$Network_Policy_Type}}
{{if $RESTART_DELETION_ENABLED}}
- name: Connectivity Soak Test - RestartPods
  measurements:
  - Identifier: ConnectivitySoakMeasurement
    Method: ConnectivitySoakMeasurement
    Params:
      action: restart
- name: Connectivity Soak Test - Delete Pods
  measurements:
  - Identifier: ConnectivitySoakMeasurement
    Method: ConnectivitySoakMeasurement
    Params:
      action: delete-pods
- name: Network Policy Soak Test - Delete CNPs
  measurements:
  - Identifier: ConnectivitySoakMeasurement
    Method: ConnectivitySoakMeasurement
    Params:
      action: delete-ccnps-cnps
{{end}}
{{end}}
# 5. gather network performance measurement (wait and gather results)
- name: Connectivity Soak Test - Gather Results
  measurements:
  - Identifier: ConnectivitySoakMeasurement
    Method: ConnectivitySoakMeasurement
    Params:
      action: gather #gather will wait for the soak test to finish
# 7. gather cilium envoy metrics
- name: "gathering cilium envoy metrics for http load test"
  measurements:
  - Identifier: HTTPPerfCiliumEnvoyMetrics
    Method: GenericPrometheusQuery
    Params:
      action: gather
      enableViolations: true
- name: APIServer Metrics
  measurements:
    - Identifier: ApiserverAvgCPUUsage
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
    - Identifier: ApiserverMaxCPUUsage
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
    - Identifier: ApiserverAvgMemUsage
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
    - Identifier: ApiserverMaxMemUsage
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
# 8. gather cilium agent metrics
- name: Cilium Metrics
  measurements:
    - Identifier: CiliumAgentAverageCPUUsage
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
    - Identifier: CiliumAgentAvgMemUsage
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
    - Identifier: CiliumAgentMaxCPUUsage
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
    - Identifier: CiliumAgentMaxMemUsage
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
    - Identifier: CiliumAgentL7Policy
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
- name: Client Metrics
  measurements: 
    - Identifier: HttpRequestsTotal
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
    - Identifier: TotalHttpRequestsFail
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
    - Identifier: TotalHttpRequestsSuccess
      Method: GenericPrometheusQuery
      Params:
        action: gather
        enableViolations: true
# IF SOAK_TEST, GATHER ENVOY MEMORY METRICS 1 HOUR AFTER THE TEST TO VERIFY MEMORY LEAKS
{{if $SOAK_TEST }}
- name: Starting Soak metrics collection
  measurements:
  - Identifier: SoakPerfCiliumEnvoyMetrics
    Method: GenericPrometheusQuery
    Params:
      action: start
      metricName: "cilium_envoy_soak_metrics"
      metricVersion: v1
      unit: s
      queries:
        - name: envoy_memory_allocated_max
          query: max(max_over_time(envoy_server_memory_allocated[3600s:])) / 1024 / 1024
        - name: envoy_memory_heap_size_max
          query: max(max_over_time(envoy_server_memory_heap_size[3600s:])) / 1024 / 1024
# sleep for 1 hour (3600s)
- name: Sleep
  measurements:
  - Identifier: Sleep
    Method: Sleep
    Params:
      duration: "3600s"
- name: Soak Envoy Memory Metrics
  measurements:
  - Identifier: SoakPerfCiliumEnvoyMetrics
    Method: GenericPrometheusQuery
    Params:
      action: gather
      enableViolations: true
{{end}}    
